<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GIS Tools | Reprojected]]></title>
  <link href="http://reprojected.github.com/blog/categories/gis-tools/atom.xml" rel="self"/>
  <link href="http://reprojected.github.com/"/>
  <updated>2012-04-08T22:32:03-07:00</updated>
  <id>http://reprojected.github.com/</id>
  <author>
    <name><![CDATA[Aaron Racicot]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Open Source Paper Submitted]]></title>
    <link href="http://reprojected.github.com/blog/2007/03/02/new-open-source-paper-submitted/"/>
    <updated>2007-03-02T23:58:51-08:00</updated>
    <id>http://reprojected.github.com/blog/2007/03/02/new-open-source-paper-submitted</id>
    <content type="html"><![CDATA[<p><img src="http://www.csc.noaa.gov/cz/images/logo.jpg" alt="CZ07" /></p>

<p>Just <a href="http://www.reprojected.com/geoblog/academic-papers/">posted</a> an <a href="http://www.reprojected.com/presentations/Papers/CZ07/cz07_aaron_racicot.pdf">extended abstract</a> for <a href="http://www.csc.noaa.gov/cz/index.html">Coastal Zone 07</a> to take place in Portland OR July 22nd-26th.  Great to get some more Open Source geospatial published...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Open Source based web mapping app - Map-Fu]]></title>
    <link href="http://reprojected.github.com/blog/2006/12/08/new-open-source-based-web-mapping-app-map-fu/"/>
    <updated>2006-12-08T13:00:16-08:00</updated>
    <id>http://reprojected.github.com/blog/2006/12/08/new-open-source-based-web-mapping-app-map-fu</id>
    <content type="html"><![CDATA[<p>A local group here at Portland State University has just announced a new mapping interface into the mix.  Check out the live demos and download the code.  Looks to be a great resource!  Thanks guys...</p>

<pre><code> We are delighted to announce a new open source framework for web-mapping, your personal Ninja of web-mapping, ladies and gentlemen, it's:

 *Map-Fu*

 Available for download, contribution of code, or reporting of bugs at our not-so-secret location on sourceforge: http://sourceforge.net/projects/map-fu/

 It features a true object-oriented PHP-Mapscript backend, with a variety
f classes and interfaces, ease of extensibility, and other
onfiguration zoink-zoink.

 On the front end is a fat Javascript client, using XMLHttpRequest to communicate with the server for updating the map and map-related data. It employs JSON for messaging and goes for a Web 2.0 feel. Some features on the front-end include pop-up tabs for reference map, legend, map information and query results. We try to maximize screen area for the map, since that's what we are interested in visually!

 Based on Minnesota Mapserver (of course) and PostGIS, we developed this interface to satisfy actual needs of clients for creating web-mapping applications that served SPECIFIC needs and required SPECIFIC tools.

 Some production sites that are using the Map-Fu or related codebase (formerly known as YAMI (Yet Another Map Interface)):

 http://glaciers.us - A database of glacier change in the Western US, including a linked assets database of aerial and oblique photos from the last century

 http://www.oregongeology.com/sub/ogdc/index.htm - The most up-to-date geology compilation for Oregon, soon to be used for other states!

 http://oscdl.research.pdx.edu/ - Oregon Sustainable
ommunities Digital Library, a temporal database of regional planning for the Portland Metro area (ten years of regional planning data, plus links to documents tied to spatial objects)

 We look forward to collaborating with a larger group of developers, and receiving feedback on our efforts! We're interested in incorporating the OpenLayers interface, and "through the web" feature editing via WFS-T.

 In the current vacuum of viable enterprise GIS solutions, we see this as a ripe time for rapid development!

 The Map-Fu development team,
Morgan, Cris, Tim, Percy &amp; Will
Portland State University
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding SESSION based data store for Chameleon based apps.]]></title>
    <link href="http://reprojected.github.com/blog/2006/10/23/adding-session-based-data-store-for-chameleon-based-apps/"/>
    <updated>2006-10-23T17:31:34-07:00</updated>
    <id>http://reprojected.github.com/blog/2006/10/23/adding-session-based-data-store-for-chameleon-based-apps</id>
    <content type="html"><![CDATA[<p>I have had a great need for a directory structure like the following in my Chameleon based apps:</p>

<p><strong><em>SESSION_DIR
|
--->data
|
--->base_data (Base data shared with all apps on file server)
|
--->app_data (Application specific data residing on local server)
|
--->dyn_data (User specific dynamically generated layers)</em></strong></p>

<p>The way I have tackeled this is to create a new directory in the session space of the Chameleon app and create symbolic links for the base and application data to common data storage areas on my file sservers.  Lastly a new directory is created in that session data directory for dynamically created data.  Pretty basic, but many questions have been asked to me about this, so here is an example.</p>

<p><strong>index.phtml</strong></p>

<p><code>// Make sure we have a data dir that is session based:
// sessionSavePath/data/base_data -&gt; symbolic link to base data dir (shared)
// sessionSavePath/data/app_data -&gt; application specific data (shared)
// sessionSavePath/data/dyn_data -&gt; user specific dynamic data (not shared)
// If the directory does not exist, then we need to make one.
$data_dir = getSessionSavePath()."/data";
$data_base_dir = $data_dir."/base_data";
$data_app_dir = $data_dir."/app_data";
$data_dyn_dir = $data_dir."/dyn_data";
//save the current application working directory
$cwd = getcwd();
if  (!file_exists($data_dir))
{
// Here we make the session data dir
$dir_exec = sprintf("mkdir ".$data_dir);
exec ($dir_exec,$arr,$err1);
$_SESSION['sessDataDir'] = $data_dir;
// Here we make the user dynamic data dir
$dir_exec = sprintf("mkdir ".$data_dyn_dir);
exec ($dir_exec,$arr,$err1);
// Here we make the base data link
$dir_exec = sprintf("ln -s ".
``$cwd."/../../base_data ".$data_base_dir);
exec ($dir_exec,$arr,$err1);
// Here we make the app data link
$dir_exec = sprintf("ln -s ".
$cwd."/../app_data ".$data_app_dir);
exec ($dir_exec,$arr,$err1);
}
// Finally we modify the data path of our map object
$oMap = $oApp-&gt;moMapSession-&gt;getMapObj();
$oMap-&gt;set("shapepath", $data_dir);</code></p>

<hr />

<p><strong>mapfile.map</strong></p>

<p><code># For base data items
DATA Political/counties.shp
becomes...
DATA base_data/Political/counties.shp```# For app specific data
DATA Marinezones/contiguous_us_eez.shp
becomes...
DATA app_data/Marinezones/contiguous_us_eez.shp```
</code># For dynamic data
Most apps will just create a layer dynamically in Mapscript and point the data statement toward the dyn_data directory.``</p>

<p>That is it.  Pretty basic, but allows you to keep your data separated between base data all apps will use, application specific data, and data that is generated dynamically by users on the fly.</p>
]]></content>
  </entry>
  
</feed>
